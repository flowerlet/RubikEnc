#include "Rubik.h"
#include <iostream>

using namespace std;

int A1[54];
int A2[54];
int* From = A1;
int* To = A2;

void WriteBack()
{
	memcpy(From, To, sizeof(int) * 54);
}

struct RotateInfo
{
	int to;
	int value;
};

int Index_F[21][2] =
{
	{6, 27},{7, 30},{8, 33},{11, 8},{14, 7},{17, 6},{18, 20},{19, 23},{20, 26},{21, 19},{22, 22},{23, 25},{24, 18},{25, 21},{26, 24},{27, 38},{30, 37},{33, 36},{36, 11},{37, 14},{38, 17}
};

int Info_F[21][4] =
{
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
};

void Rotate_F()
{
	for (int i = 0; i < 21; i++)
	{
		To[Index_F[i][1]] = Info_F[i][From[Index_F[i][0]]];
	}
}

int Index_f[21][2] =
{
	{6, 17},{7, 14},{8, 11},{11, 36},{14, 37},{17, 38},{18, 24},{19, 21},{20, 18},{21, 25},{22, 22},{23, 19},{24, 26},{25, 23},{26, 20},{27, 6},{30, 7},{33, 8},{36, 33},{37, 30},{38, 27},
};
int Info_f[21][4] =
{
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
};

void Rotate_f()
{
	for (int i = 0; i < 21; i++)
	{
		To[Index_f[i][1]] = Info_f[i][From[Index_f[i][0]]];
	}
}

int Index_B[21][2] =
{
	{0, 15},{1, 12},{2, 9},{9, 42},{12, 43},{15, 44},{29, 0},{32, 1},{35, 2},{42, 35},{43, 32},{44, 29},{45, 47},{46, 50},{47, 53},{48, 46},{49, 49},{50, 52},{51, 45},{52, 48},{53, 51},
};
int Info_B[21][4] =
{
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
};

void Rotate_B()
{
	for (int i = 0; i < 21; i++)
	{
		To[Index_B[i][1]] = Info_B[i][From[Index_B[i][0]]];
	}
}

int Index_b[21][2] =
{
	{0, 29},{1, 32},{2, 35},{9, 2},{12, 1},{15, 0},{29, 44},{32, 43},{35, 42},{42, 9},{43, 12},{44, 15},{45, 51},{46, 48},{47, 45},{48, 52},{49, 49},{50, 46},{51, 53},{52, 50},{53, 47},
};
int Info_b[21][4] =
{
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
};

void Rotate_b()
{
	for (int i = 0; i < 21; i++)
	{
		To[Index_b[i][1]] = Info_b[i][From[Index_b[i][0]]];
	}
}

int Index_L[21][2] =
{
	{0, 18},{3, 21},{6, 24},{9, 11},{10, 14},{11, 17},{12, 10},{13, 13},{14, 16},{15, 9},{16, 12},{17, 15},{18, 36},{21, 39},{24, 42},{36, 53},{39, 50},{42, 47},{47, 6},{50, 3},{53, 0},
};
int Info_L[21][4] =
{
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{2, 3, 0, 1},
	{2, 3, 0, 1},
	{2, 3, 0, 1},
	{2, 3, 0, 1},
	{2, 3, 0, 1},
	{2, 3, 0, 1},
};

void Rotate_L()
{
	for (int i = 0; i < 21; i++)
	{
		To[Index_L[i][1]] = Info_L[i][From[Index_L[i][0]]];
	}
}

int Index_l[21][2] =
{
	{0, 53},{3, 50},{6, 47},{9, 15},{10, 12},{11, 9},{12, 16},{13, 13},{14, 10},{15, 17},{16, 14},{17, 11},{18, 0},{21, 3},{24, 6},{36, 18},{39, 21},{42, 24},{47, 42},{50, 39},{53, 36},
};
int Info_l[21][4] =
{
	{2, 3, 0, 1},
	{2, 3, 0, 1},
	{2, 3, 0, 1},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{2, 3, 0, 1},
	{2, 3, 0, 1},
	{2, 3, 0, 1},
};

void Rotate_l()
{
	for (int i = 0; i < 21; i++)
	{
		To[Index_l[i][1]] = Info_l[i][From[Index_l[i][0]]];
	}
}

int Index_R[21][2] =
{
	{2, 51},{5, 48},{8, 45},{20, 2},{23, 5},{26, 8},{27, 29},{28, 32},{29, 35},{30, 28},{31, 31},{32, 34},{33, 27},{34, 30},{35, 33},{38, 20},{41, 23},{44, 26},{45, 44},{48, 41},{51, 38},
};
int Info_R[21][4] =
{
	{2, 3, 0, 1},
	{2, 3, 0, 1},
	{2, 3, 0, 1},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{2, 3, 0, 1},
	{2, 3, 0, 1},
	{2, 3, 0, 1},
};

void Rotate_R()
{
	for (int i = 0; i < 21; i++)
	{
		To[Index_R[i][1]] = Info_R[i][From[Index_R[i][0]]];
	}
}

int Index_r[21][2] =
{
	{2, 20},{5, 23},{8, 26},{20, 38},{23, 41},{26, 44},{27, 33},{28, 30},{29, 27},{30, 34},{31, 31},{32, 28},{33, 35},{34, 32},{35, 29},{38, 51},{41, 48},{44, 45},{45, 8},{48, 5},{51, 2},
};
int Info_r[21][4] =
{
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{2, 3, 0, 1},
	{2, 3, 0, 1},
	{2, 3, 0, 1},
	{2, 3, 0, 1},
	{2, 3, 0, 1},
	{2, 3, 0, 1},
};

void Rotate_r()
{
	for (int i = 0; i < 21; i++)
	{
		//		cout << "from " << i << ": " << From[Index_r[i][0]] << endl;
		To[Index_r[i][1]] = Info_r[i][From[Index_r[i][0]]];
	}
}

int Index_U[21][2] =
{
	{0, 2},{1, 5},{2, 8},{3, 1},{4, 4},{5, 7},{6, 0},{7, 3},{8, 6},{9, 45},{10, 46},{11, 47},{18, 9},{19, 10},{20, 11},{27, 18},{28, 19},{29, 20},{45, 27},{46, 28},{47, 29},
};
int Info_U[21][4] =
{
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
};

void Rotate_U()
{
	for (int i = 0; i < 21; i++)
	{
		To[Index_U[i][1]] = Info_U[i][From[Index_U[i][0]]];
	}
}

int Index_u[21][2] =
{
	{0, 6},{1, 3},{2, 0},{3, 7},{4, 4},{5, 1},{6, 8},{7, 5},{8, 2},{9, 18},{10, 19},{11, 20},{18, 27},{19, 28},{20, 29},{27, 45},{28, 46},{29, 47},{45, 9},{46, 10},{47, 11},
};
int Info_u[21][4] =
{
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
};

void Rotate_u()
{
	for (int i = 0; i < 21; i++)
	{
		To[Index_u[i][1]] = Info_u[i][From[Index_u[i][0]]];
	}
}

int Index_D[21][2] =
{
	{15, 24},{16, 25},{17, 26},{24, 33},{25, 34},{26, 35},{33, 51},{34, 52},{35, 53},{36, 38},{37, 41},{38, 44},{39, 37},{40, 40},{41, 43},{42, 36},{43, 39},{44, 42},{51, 15},{52, 16},{53, 17},
};
int Info_D[21][4] =
{
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{1, 2, 3, 0},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
};

void Rotate_D()
{
	for (int i = 0; i < 21; i++)
	{
		To[Index_D[i][1]] = Info_D[i][From[Index_D[i][0]]];
	}
}

int Index_d[21][2] =
{
	{15, 51},{16, 52},{17, 53},{24, 15},{25, 16},{26, 17},{33, 24},{34, 25},{35, 26},{36, 42},{37, 39},{38, 36},{39, 43},{40, 40},{41, 37},{42, 44},{43, 41},{44, 38},{51, 33},{52, 34},{53, 35},
};
int Info_d[21][4] =
{
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{3, 0, 1, 2},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
	{0, 1, 2, 3},
};

void Rotate_d()
{
	for (int i = 0; i < 21; i++)
	{
		To[Index_d[i][1]] = Info_d[i][From[Index_d[i][0]]];
	}
}

string& ReplaceAll(string& str, const string& old_value, const string& new_value)
{
	while (true)
	{
		string::size_type pos(0);
		if ((pos = str.find(old_value)) != string::npos)
			str.replace(pos, old_value.length(), new_value);
		else break;
	}
	return str;
}

void Rotate(string seq)
{
	seq = ReplaceAll(seq, "S", "RLUUFuDFFRRBBLUUfbURRDFFURRU");
	seq = ReplaceAll(seq, "s", "urruffdrruBFuulbbrrffdUfuulr");
	seq = ReplaceAll(seq, "M", "UUDDLFFuDRRBudRLFFRUdrLUfb");
	seq = ReplaceAll(seq, "m", "BFulRDurfflrDUbrrdUffldduu");

	for (char c : seq)
	{
		switch (c)
		{
		case 'F':
			Rotate_F();
			break;
		case 'f':
			Rotate_f();
			break;
		case 'B':
			Rotate_B();
			break;
		case 'b':
			Rotate_b();
			break;
		case 'L':
			Rotate_L();
			break;
		case 'l':
			Rotate_l();
			break;
		case 'R':
			Rotate_R();
			break;
		case 'r':
			Rotate_r();
			break;
		case 'U':
			Rotate_U();
			break;
		case 'u':
			Rotate_u();
			break;
		case 'D':
			Rotate_D();
			break;
		case 'd':
			Rotate_d();
			break;
		default:
			continue;
		}

		WriteBack();
	}
}

void Encode(std::string seq)
{
	if (seq.length() != 108) return;
	for (int i = 0; i < 54; i++)
	{
		string s = seq.substr(i * 2, 2);
		if (s == "00")
		{
			From[i] = 0;
		}
		else if (s == "01")
		{
			From[i] = 1;
		}
		else if (s == "10")
		{
			From[i] = 2;
		}
		else if (s == "11")
		{
			From[i] = 3;
		}
	}
	for (int i = 0; i < 54; i++)
	{
		To[i] = From[i];
	}
}

void OutputArrow(int i)
{
	switch (To[i])
	{
	case 0:
		cout << "↑";
		break;
	case 1:
		cout << "→";
		break;
	case 2:
		cout << "↓";
		break;
	case 3:
		cout << "←";
		break;
	default:
		break;
	}
}

void ShowArrows()
{
	cout << "U:";
	for (int i = 0; i < 9; i++)
	{
		OutputArrow(i);
	}
	cout << endl;

	cout << "L:";
	for (int i = 9; i < 18; i++)
	{
		OutputArrow(i);
	}
	cout << endl;

	cout << "F:";
	for (int i = 18; i < 27; i++)
	{
		OutputArrow(i);
	}
	cout << endl;

	cout << "R:";
	for (int i = 27; i < 36; i++)
	{
		OutputArrow(i);
	}
	cout << endl;

	cout << "D:";
	for (int i = 36; i < 45; i++)
	{
		OutputArrow(i);
	}
	cout << endl;

	cout << "B:";
	for (int i = 45; i < 54; i++)
	{
		OutputArrow(i);
	}
	cout << endl;
}


std::string Decode()
{
	string result;
	for (int i = 0; i < 54; i++)
	{
		switch (To[i])
		{
		case 0:
			result += "00";
			break;
		case 1:
			result += "01";
			break;
		case 2:
			result += "10";
			break;
		case 3:
			result += "11";
			break;
		default:
			continue;
		}
	}
	return result;
}

string All_Up = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
string All_Right = "010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101";
string All_Down = "101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010";
string All_Left = "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";

string testInput = "100010010111010110101100111111000100101001111100000100110110000110111000110001010111011010001111010000111101";
string testRotateSeq = "SMULFRDBulfrdbsm";
string testOutput = "101111010110110110100010111100010010011011011111111000000011000100001001111100110100111100101000000000000010";

int main()
{
	Encode(testInput);
	Rotate(testRotateSeq);
	string result = Decode();
	cout << "output:" << endl;
	cout << result << endl;
	ShowArrows();
	cout << "target:" << endl;
	cout << testOutput << endl;
	cout << (result == testOutput ? "match" : "not match") << endl;

	system("pause");
	return 0;
}
